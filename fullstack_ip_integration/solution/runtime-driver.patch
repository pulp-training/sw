diff --git a/drivers/wide_alu_driver.c b/drivers/wide_alu_driver.c
new file mode 100644
index 0000000..85c8b9b
--- /dev/null
+++ b/drivers/wide_alu_driver.c
@@ -0,0 +1,93 @@
+#include <wide_alu_driver.h>
+#include <stdint.h>
+#include <stdio.h>
+
+void set_op(uint8_t operation)
+{
+    uint32_t volatile *ctrl2_reg = (uint32_t *)WIDE_ALU_CTRL2(0);
+    uint32_t ctrl2_old_value = *ctrl2_reg;
+    *ctrl2_reg = ctrl2_old_value | (operation & WIDE_ALU_CTRL2_OPSEL_MASK) << WIDE_ALU_CTRL2_OPSEL_LSB;
+}
+
+void set_delay(uint8_t delay)
+{
+  uint32_t volatile * ctrl2_reg = (uint32_t*)WIDE_ALU_CTRL2(0);
+  uint32_t ctrl2_old_value;
+  //Read old value
+  ctrl2_old_value = *ctrl2_reg;
+  //Overwrite operation bits
+  *ctrl2_reg = ctrl2_old_value | (delay & WIDE_ALU_CTRL2_DELAY_MASK)<<WIDE_ALU_CTRL2_DELAY_LSB;
+}
+
+
+void set_operands(uint32_t* a, uint32_t* b)
+{
+  uint32_t volatile * op_a_reg_start = (uint32_t*)WIDE_ALU_OP_A_0(0);
+  uint32_t volatile * op_b_reg_start = (uint32_t*)WIDE_ALU_OP_B_0(0);
+  //Make sure we are in idle state before changing the operands
+  for (int i = 0; i<256/32; i++)
+  {
+    op_a_reg_start[i] = a[i];
+    op_b_reg_start[i] = b[i];
+  }
+}
+
+void trigger_op(void) {
+    uint32_t volatile *ctrl1_reg = (uint32_t *)WIDE_ALU_CTRL1(0);
+    asm volatile ("": : : "memory");
+    *ctrl1_reg = (1 & WIDE_ALU_CTRL1_TRIGGER_MASK) << WIDE_ALU_CTRL1_TRIGGER_LSB;
+    asm volatile ("": : : "memory");
+}
+
+int poll_done(void)
+{
+  uint32_t volatile * status_reg = (uint32_t*)WIDE_ALU_STATUS(0);
+  uint32_t current_status;
+  do {
+    current_status = (*status_reg>>WIDE_ALU_STATUS_CODE_LSB)&WIDE_ALU_STATUS_CODE_MASK;
+  } while(current_status == WIDE_ALU_STATUS_CODE_PENDING);
+  if (current_status == WIDE_ALU_STATUS_CODE_IDLE)
+    return 0;
+  else
+    return current_status;
+}
+
+void get_result(uint32_t* result)
+{
+  uint32_t volatile * result_reg_start = (uint32_t*)WIDE_ALU_RESULT_0(0);
+  for (int i = 0; i<512/32; i++)
+  {
+    result[i] = result_reg_start[i];
+  }
+}
+
+void clear_error(void)
+{
+  uint32_t volatile * ctrl1_reg = (uint32_t*)WIDE_ALU_CTRL1(0);
+  //Trigger operation by writing to trigger bit
+  *ctrl1_reg = (1 & WIDE_ALU_CTRL1_CLEAR_ERR_MASK)<<WIDE_ALU_CTRL1_CLEAR_ERR_LSB;
+}
+
+int wide_multiply(uint32_t a[32], uint32_t b[32], uint32_t result[64]) {
+    int status = poll_done();
+    if (status != 0) {
+	printf("error: setting up multiplication\n");
+	return status;
+    }
+    set_operands(a, b);
+    set_op(WIDE_ALU_CTRL2_OPSEL_MUL);
+
+    trigger_op();
+
+    status = poll_done();
+
+    if (status != 0) {
+	printf("operation failed\n");
+	return status;
+    }
+    else
+    {
+	get_result(result);
+	return 0;
+    }
+}
diff --git a/include/archi/chips/pulpissimo/memory_map.h b/include/archi/chips/pulpissimo/memory_map.h
index 4e226bb..677a947 100644
--- a/include/archi/chips/pulpissimo/memory_map.h
+++ b/include/archi/chips/pulpissimo/memory_map.h
@@ -77,5 +77,7 @@
 #define ARCHI_CLUSTER_PERIPHERALS_ADDR             ( ARCHI_CLUSTER_ADDR + ARCHI_CLUSTER_PERIPHERALS_OFFSET )
 #define ARCHI_CLUSTER_PERIPHERALS_GLOBAL_ADDR(cid) ( ARCHI_CLUSTER_GLOBAL_ADDR(cid) + ARCHI_CLUSTER_PERIPHERALS_OFFSET )
 
+/* new axi ip */
+#define WIDE_ALU0_BASE_ADDR 0x1a400000
 
 #endif
diff --git a/include/pulp.h b/include/pulp.h
index c56b2d5..8f48132 100755
--- a/include/pulp.h
+++ b/include/pulp.h
@@ -27,6 +27,8 @@
 #include <archi/pulp.h>
 #include <hal/pulp.h>
 #include <data/data.h>
+#include <wide_alu_auto.h>
+#include <wide_alu_driver.h>
 
 typedef enum {
   PI_FREQ_DOMAIN_FC     = 0,
diff --git a/include/wide_alu_auto.h b/include/wide_alu_auto.h
new file mode 100644
index 0000000..9c92697
--- /dev/null
+++ b/include/wide_alu_auto.h
@@ -0,0 +1,305 @@
+// Generated register defines for wide_alu
+
+#ifndef _WIDE_ALU_REG_DEFS_
+#define _WIDE_ALU_REG_DEFS_
+
+// Subword of Operand A.
+#define WIDE_ALU_OP_A_0(id)                 (WIDE_ALU ## id ## _BASE_ADDR  + 0x0)
+#define WIDE_ALU_OP_A_0_OFFSET              0x0
+# define WIDE_ALU_OP_A_0_LSB                0x0
+# define WIDE_ALU_OP_A_0_MASK               0xffffffff
+# define WIDE_ALU_OP_A_0_SIZE               0x20
+# define WIDE_ALU_OP_A_0_DEFAULT            0x0
+
+// Subword of Operand A.
+#define WIDE_ALU_OP_A_1(id)                 (WIDE_ALU ## id ## _BASE_ADDR  + 0x4)
+#define WIDE_ALU_OP_A_1_OFFSET              0x4
+# define WIDE_ALU_OP_A_1_LSB                0x0
+# define WIDE_ALU_OP_A_1_MASK               0xffffffff
+# define WIDE_ALU_OP_A_1_SIZE               0x20
+# define WIDE_ALU_OP_A_1_DEFAULT            0x0
+
+// Subword of Operand A.
+#define WIDE_ALU_OP_A_2(id)                 (WIDE_ALU ## id ## _BASE_ADDR  + 0x8)
+#define WIDE_ALU_OP_A_2_OFFSET              0x8
+# define WIDE_ALU_OP_A_2_LSB                0x0
+# define WIDE_ALU_OP_A_2_MASK               0xffffffff
+# define WIDE_ALU_OP_A_2_SIZE               0x20
+# define WIDE_ALU_OP_A_2_DEFAULT            0x0
+
+// Subword of Operand A.
+#define WIDE_ALU_OP_A_3(id)                 (WIDE_ALU ## id ## _BASE_ADDR  + 0xc)
+#define WIDE_ALU_OP_A_3_OFFSET              0xc
+# define WIDE_ALU_OP_A_3_LSB                0x0
+# define WIDE_ALU_OP_A_3_MASK               0xffffffff
+# define WIDE_ALU_OP_A_3_SIZE               0x20
+# define WIDE_ALU_OP_A_3_DEFAULT            0x0
+
+// Subword of Operand A.
+#define WIDE_ALU_OP_A_4(id)                 (WIDE_ALU ## id ## _BASE_ADDR  + 0x10)
+#define WIDE_ALU_OP_A_4_OFFSET              0x10
+# define WIDE_ALU_OP_A_4_LSB                0x0
+# define WIDE_ALU_OP_A_4_MASK               0xffffffff
+# define WIDE_ALU_OP_A_4_SIZE               0x20
+# define WIDE_ALU_OP_A_4_DEFAULT            0x0
+
+// Subword of Operand A.
+#define WIDE_ALU_OP_A_5(id)                 (WIDE_ALU ## id ## _BASE_ADDR  + 0x14)
+#define WIDE_ALU_OP_A_5_OFFSET              0x14
+# define WIDE_ALU_OP_A_5_LSB                0x0
+# define WIDE_ALU_OP_A_5_MASK               0xffffffff
+# define WIDE_ALU_OP_A_5_SIZE               0x20
+# define WIDE_ALU_OP_A_5_DEFAULT            0x0
+
+// Subword of Operand A.
+#define WIDE_ALU_OP_A_6(id)                 (WIDE_ALU ## id ## _BASE_ADDR  + 0x18)
+#define WIDE_ALU_OP_A_6_OFFSET              0x18
+# define WIDE_ALU_OP_A_6_LSB                0x0
+# define WIDE_ALU_OP_A_6_MASK               0xffffffff
+# define WIDE_ALU_OP_A_6_SIZE               0x20
+# define WIDE_ALU_OP_A_6_DEFAULT            0x0
+
+// Subword of Operand A.
+#define WIDE_ALU_OP_A_7(id)                 (WIDE_ALU ## id ## _BASE_ADDR  + 0x1c)
+#define WIDE_ALU_OP_A_7_OFFSET              0x1c
+# define WIDE_ALU_OP_A_7_LSB                0x0
+# define WIDE_ALU_OP_A_7_MASK               0xffffffff
+# define WIDE_ALU_OP_A_7_SIZE               0x20
+# define WIDE_ALU_OP_A_7_DEFAULT            0x0
+
+// Subword of Operand B.
+#define WIDE_ALU_OP_B_0(id)                 (WIDE_ALU ## id ## _BASE_ADDR  + 0x20)
+#define WIDE_ALU_OP_B_0_OFFSET              0x20
+# define WIDE_ALU_OP_B_0_LSB                0x0
+# define WIDE_ALU_OP_B_0_MASK               0xffffffff
+# define WIDE_ALU_OP_B_0_SIZE               0x20
+# define WIDE_ALU_OP_B_0_DEFAULT            0x0
+
+// Subword of Operand B.
+#define WIDE_ALU_OP_B_1(id)                 (WIDE_ALU ## id ## _BASE_ADDR  + 0x24)
+#define WIDE_ALU_OP_B_1_OFFSET              0x24
+# define WIDE_ALU_OP_B_1_LSB                0x0
+# define WIDE_ALU_OP_B_1_MASK               0xffffffff
+# define WIDE_ALU_OP_B_1_SIZE               0x20
+# define WIDE_ALU_OP_B_1_DEFAULT            0x0
+
+// Subword of Operand B.
+#define WIDE_ALU_OP_B_2(id)                 (WIDE_ALU ## id ## _BASE_ADDR  + 0x28)
+#define WIDE_ALU_OP_B_2_OFFSET              0x28
+# define WIDE_ALU_OP_B_2_LSB                0x0
+# define WIDE_ALU_OP_B_2_MASK               0xffffffff
+# define WIDE_ALU_OP_B_2_SIZE               0x20
+# define WIDE_ALU_OP_B_2_DEFAULT            0x0
+
+// Subword of Operand B.
+#define WIDE_ALU_OP_B_3(id)                 (WIDE_ALU ## id ## _BASE_ADDR  + 0x2c)
+#define WIDE_ALU_OP_B_3_OFFSET              0x2c
+# define WIDE_ALU_OP_B_3_LSB                0x0
+# define WIDE_ALU_OP_B_3_MASK               0xffffffff
+# define WIDE_ALU_OP_B_3_SIZE               0x20
+# define WIDE_ALU_OP_B_3_DEFAULT            0x0
+
+// Subword of Operand B.
+#define WIDE_ALU_OP_B_4(id)                 (WIDE_ALU ## id ## _BASE_ADDR  + 0x30)
+#define WIDE_ALU_OP_B_4_OFFSET              0x30
+# define WIDE_ALU_OP_B_4_LSB                0x0
+# define WIDE_ALU_OP_B_4_MASK               0xffffffff
+# define WIDE_ALU_OP_B_4_SIZE               0x20
+# define WIDE_ALU_OP_B_4_DEFAULT            0x0
+
+// Subword of Operand B.
+#define WIDE_ALU_OP_B_5(id)                 (WIDE_ALU ## id ## _BASE_ADDR  + 0x34)
+#define WIDE_ALU_OP_B_5_OFFSET              0x34
+# define WIDE_ALU_OP_B_5_LSB                0x0
+# define WIDE_ALU_OP_B_5_MASK               0xffffffff
+# define WIDE_ALU_OP_B_5_SIZE               0x20
+# define WIDE_ALU_OP_B_5_DEFAULT            0x0
+
+// Subword of Operand B.
+#define WIDE_ALU_OP_B_6(id)                 (WIDE_ALU ## id ## _BASE_ADDR  + 0x38)
+#define WIDE_ALU_OP_B_6_OFFSET              0x38
+# define WIDE_ALU_OP_B_6_LSB                0x0
+# define WIDE_ALU_OP_B_6_MASK               0xffffffff
+# define WIDE_ALU_OP_B_6_SIZE               0x20
+# define WIDE_ALU_OP_B_6_DEFAULT            0x0
+
+// Subword of Operand B.
+#define WIDE_ALU_OP_B_7(id)                 (WIDE_ALU ## id ## _BASE_ADDR  + 0x3c)
+#define WIDE_ALU_OP_B_7_OFFSET              0x3c
+# define WIDE_ALU_OP_B_7_LSB                0x0
+# define WIDE_ALU_OP_B_7_MASK               0xffffffff
+# define WIDE_ALU_OP_B_7_SIZE               0x20
+# define WIDE_ALU_OP_B_7_DEFAULT            0x0
+
+// Subword of results.
+#define WIDE_ALU_RESULT_0(id)               (WIDE_ALU ## id ## _BASE_ADDR  + 0x40)
+#define WIDE_ALU_RESULT_0_OFFSET            0x40
+# define WIDE_ALU_RESULT_0_LSB              0x0
+# define WIDE_ALU_RESULT_0_MASK             0xffffffff
+# define WIDE_ALU_RESULT_0_SIZE             0x20
+# define WIDE_ALU_RESULT_0_DEFAULT          0x0
+
+// Subword of results.
+#define WIDE_ALU_RESULT_1(id)               (WIDE_ALU ## id ## _BASE_ADDR  + 0x44)
+#define WIDE_ALU_RESULT_1_OFFSET            0x44
+# define WIDE_ALU_RESULT_1_LSB              0x0
+# define WIDE_ALU_RESULT_1_MASK             0xffffffff
+# define WIDE_ALU_RESULT_1_SIZE             0x20
+# define WIDE_ALU_RESULT_1_DEFAULT          0x0
+
+// Subword of results.
+#define WIDE_ALU_RESULT_2(id)               (WIDE_ALU ## id ## _BASE_ADDR  + 0x48)
+#define WIDE_ALU_RESULT_2_OFFSET            0x48
+# define WIDE_ALU_RESULT_2_LSB              0x0
+# define WIDE_ALU_RESULT_2_MASK             0xffffffff
+# define WIDE_ALU_RESULT_2_SIZE             0x20
+# define WIDE_ALU_RESULT_2_DEFAULT          0x0
+
+// Subword of results.
+#define WIDE_ALU_RESULT_3(id)               (WIDE_ALU ## id ## _BASE_ADDR  + 0x4c)
+#define WIDE_ALU_RESULT_3_OFFSET            0x4c
+# define WIDE_ALU_RESULT_3_LSB              0x0
+# define WIDE_ALU_RESULT_3_MASK             0xffffffff
+# define WIDE_ALU_RESULT_3_SIZE             0x20
+# define WIDE_ALU_RESULT_3_DEFAULT          0x0
+
+// Subword of results.
+#define WIDE_ALU_RESULT_4(id)               (WIDE_ALU ## id ## _BASE_ADDR  + 0x50)
+#define WIDE_ALU_RESULT_4_OFFSET            0x50
+# define WIDE_ALU_RESULT_4_LSB              0x0
+# define WIDE_ALU_RESULT_4_MASK             0xffffffff
+# define WIDE_ALU_RESULT_4_SIZE             0x20
+# define WIDE_ALU_RESULT_4_DEFAULT          0x0
+
+// Subword of results.
+#define WIDE_ALU_RESULT_5(id)               (WIDE_ALU ## id ## _BASE_ADDR  + 0x54)
+#define WIDE_ALU_RESULT_5_OFFSET            0x54
+# define WIDE_ALU_RESULT_5_LSB              0x0
+# define WIDE_ALU_RESULT_5_MASK             0xffffffff
+# define WIDE_ALU_RESULT_5_SIZE             0x20
+# define WIDE_ALU_RESULT_5_DEFAULT          0x0
+
+// Subword of results.
+#define WIDE_ALU_RESULT_6(id)               (WIDE_ALU ## id ## _BASE_ADDR  + 0x58)
+#define WIDE_ALU_RESULT_6_OFFSET            0x58
+# define WIDE_ALU_RESULT_6_LSB              0x0
+# define WIDE_ALU_RESULT_6_MASK             0xffffffff
+# define WIDE_ALU_RESULT_6_SIZE             0x20
+# define WIDE_ALU_RESULT_6_DEFAULT          0x0
+
+// Subword of results.
+#define WIDE_ALU_RESULT_7(id)               (WIDE_ALU ## id ## _BASE_ADDR  + 0x5c)
+#define WIDE_ALU_RESULT_7_OFFSET            0x5c
+# define WIDE_ALU_RESULT_7_LSB              0x0
+# define WIDE_ALU_RESULT_7_MASK             0xffffffff
+# define WIDE_ALU_RESULT_7_SIZE             0x20
+# define WIDE_ALU_RESULT_7_DEFAULT          0x0
+
+// Subword of results.
+#define WIDE_ALU_RESULT_8(id)               (WIDE_ALU ## id ## _BASE_ADDR  + 0x60)
+#define WIDE_ALU_RESULT_8_OFFSET            0x60
+# define WIDE_ALU_RESULT_8_LSB              0x0
+# define WIDE_ALU_RESULT_8_MASK             0xffffffff
+# define WIDE_ALU_RESULT_8_SIZE             0x20
+# define WIDE_ALU_RESULT_8_DEFAULT          0x0
+
+// Subword of results.
+#define WIDE_ALU_RESULT_9(id)               (WIDE_ALU ## id ## _BASE_ADDR  + 0x64)
+#define WIDE_ALU_RESULT_9_OFFSET            0x64
+# define WIDE_ALU_RESULT_9_LSB              0x0
+# define WIDE_ALU_RESULT_9_MASK             0xffffffff
+# define WIDE_ALU_RESULT_9_SIZE             0x20
+# define WIDE_ALU_RESULT_9_DEFAULT          0x0
+
+// Subword of results.
+#define WIDE_ALU_RESULT_10(id)              (WIDE_ALU ## id ## _BASE_ADDR  + 0x68)
+#define WIDE_ALU_RESULT_10_OFFSET           0x68
+# define WIDE_ALU_RESULT_10_LSB             0x0
+# define WIDE_ALU_RESULT_10_MASK            0xffffffff
+# define WIDE_ALU_RESULT_10_SIZE            0x20
+# define WIDE_ALU_RESULT_10_DEFAULT         0x0
+
+// Subword of results.
+#define WIDE_ALU_RESULT_11(id)              (WIDE_ALU ## id ## _BASE_ADDR  + 0x6c)
+#define WIDE_ALU_RESULT_11_OFFSET           0x6c
+# define WIDE_ALU_RESULT_11_LSB             0x0
+# define WIDE_ALU_RESULT_11_MASK            0xffffffff
+# define WIDE_ALU_RESULT_11_SIZE            0x20
+# define WIDE_ALU_RESULT_11_DEFAULT         0x0
+
+// Subword of results.
+#define WIDE_ALU_RESULT_12(id)              (WIDE_ALU ## id ## _BASE_ADDR  + 0x70)
+#define WIDE_ALU_RESULT_12_OFFSET           0x70
+# define WIDE_ALU_RESULT_12_LSB             0x0
+# define WIDE_ALU_RESULT_12_MASK            0xffffffff
+# define WIDE_ALU_RESULT_12_SIZE            0x20
+# define WIDE_ALU_RESULT_12_DEFAULT         0x0
+
+// Subword of results.
+#define WIDE_ALU_RESULT_13(id)              (WIDE_ALU ## id ## _BASE_ADDR  + 0x74)
+#define WIDE_ALU_RESULT_13_OFFSET           0x74
+# define WIDE_ALU_RESULT_13_LSB             0x0
+# define WIDE_ALU_RESULT_13_MASK            0xffffffff
+# define WIDE_ALU_RESULT_13_SIZE            0x20
+# define WIDE_ALU_RESULT_13_DEFAULT         0x0
+
+// Subword of results.
+#define WIDE_ALU_RESULT_14(id)              (WIDE_ALU ## id ## _BASE_ADDR  + 0x78)
+#define WIDE_ALU_RESULT_14_OFFSET           0x78
+# define WIDE_ALU_RESULT_14_LSB             0x0
+# define WIDE_ALU_RESULT_14_MASK            0xffffffff
+# define WIDE_ALU_RESULT_14_SIZE            0x20
+# define WIDE_ALU_RESULT_14_DEFAULT         0x0
+
+// Subword of results.
+#define WIDE_ALU_RESULT_15(id)              (WIDE_ALU ## id ## _BASE_ADDR  + 0x7c)
+#define WIDE_ALU_RESULT_15_OFFSET           0x7c
+# define WIDE_ALU_RESULT_15_LSB             0x0
+# define WIDE_ALU_RESULT_15_MASK            0xffffffff
+# define WIDE_ALU_RESULT_15_SIZE            0x20
+# define WIDE_ALU_RESULT_15_DEFAULT         0x0
+
+// Controls clear and trigger signal of the deaccelerator.
+#define WIDE_ALU_CTRL1(id)                  (WIDE_ALU ## id ## _BASE_ADDR  + 0x80)
+#define WIDE_ALU_CTRL1_OFFSET               0x80
+# define WIDE_ALU_CTRL1_TRIGGER_LSB         0x0
+# define WIDE_ALU_CTRL1_TRIGGER_MASK        0x1
+# define WIDE_ALU_CTRL1_TRIGGER_SIZE        0x1
+# define WIDE_ALU_CTRL1_TRIGGER_DEFAULT     0x0
+# define WIDE_ALU_CTRL1_CLEAR_ERR_LSB       0x1
+# define WIDE_ALU_CTRL1_CLEAR_ERR_MASK      0x1
+# define WIDE_ALU_CTRL1_CLEAR_ERR_SIZE      0x1
+# define WIDE_ALU_CTRL1_CLEAR_ERR_DEFAULT   0x0
+
+// Configures the operation and its delay within the deaccelerator.
+#define WIDE_ALU_CTRL2(id)                  (WIDE_ALU ## id ## _BASE_ADDR  + 0x84)
+#define WIDE_ALU_CTRL2_OFFSET               0x84
+# define WIDE_ALU_CTRL2_OPSEL_LSB           0x0
+# define WIDE_ALU_CTRL2_OPSEL_MASK          0x7
+# define WIDE_ALU_CTRL2_OPSEL_SIZE          0x3
+# define WIDE_ALU_CTRL2_OPSEL_DEFAULT       0x0
+# define WIDE_ALU_CTRL2_OPSEL_ADD           0x0
+# define WIDE_ALU_CTRL2_OPSEL_SUB           0x1
+# define WIDE_ALU_CTRL2_OPSEL_MUL           0x2
+# define WIDE_ALU_CTRL2_OPSEL_XOR           0x3
+# define WIDE_ALU_CTRL2_OPSEL_AND           0x4
+# define WIDE_ALU_CTRL2_OPSEL_OR            0x5
+# define WIDE_ALU_CTRL2_DELAY_LSB           0x10
+# define WIDE_ALU_CTRL2_DELAY_MASK          0xff
+# define WIDE_ALU_CTRL2_DELAY_SIZE          0x8
+# define WIDE_ALU_CTRL2_DELAY_DEFAULT       0x0
+
+// Contains the current status of the Deaccelerator.
+#define WIDE_ALU_STATUS(id)                 (WIDE_ALU ## id ## _BASE_ADDR  + 0x88)
+#define WIDE_ALU_STATUS_OFFSET              0x88
+# define WIDE_ALU_STATUS_CODE_LSB           0x0
+# define WIDE_ALU_STATUS_CODE_MASK          0x3
+# define WIDE_ALU_STATUS_CODE_SIZE          0x2
+# define WIDE_ALU_STATUS_CODE_DEFAULT       0x0
+# define WIDE_ALU_STATUS_CODE_IDLE          0x0
+# define WIDE_ALU_STATUS_CODE_PENDING       0x1
+# define WIDE_ALU_STATUS_CODE_ERROR_WRITE   0x2
+# define WIDE_ALU_STATUS_CODE_ERROR_OPCODE  0x3
+
+#endif // _WIDE_ALU_REG_DEFS_
+//End generated register defines for wide_alu
diff --git a/include/wide_alu_driver.h b/include/wide_alu_driver.h
new file mode 100644
index 0000000..8208ce0
--- /dev/null
+++ b/include/wide_alu_driver.h
@@ -0,0 +1,11 @@
+#include <wide_alu_auto.h>
+#include <stdint.h>
+#include <hal/pulp.h>
+
+void set_op(uint8_t operation);
+void set_delay(uint8_t delay);
+void trigger_op(void);
+void set_operands(uint32_t* a, uint32_t* b);
+int poll_done(void);
+void clear_error(void);
+int wide_multiply(uint32_t a[32], uint32_t b[32], uint32_t result[64]);
diff --git a/rules/pulpos/targets/pulpissimo.mk b/rules/pulpos/targets/pulpissimo.mk
index 31fa720..b7f1a43 100644
--- a/rules/pulpos/targets/pulpissimo.mk
+++ b/rules/pulpos/targets/pulpissimo.mk
@@ -38,6 +38,10 @@ PULP_SRCS     += kernel/fll-v$(fll/version).c
 PULP_SRCS     += kernel/freq-domains.c
 PULP_SRCS     += kernel/chips/pulpissimo/soc.c
 
+# my new axi driver
+PULP_SRCS     += drivers/wide_alu_driver.c
+
+
 
 include $(PULPRT_HOME)/rules/pulpos/configs/default.mk
 
@@ -45,4 +49,4 @@ ifeq '$(platform)' 'fpga'
 CONFIG_IO_UART=1
 endif
 
-include $(PULPRT_HOME)/rules/pulpos/default_rules.mk
\ No newline at end of file
+include $(PULPRT_HOME)/rules/pulpos/default_rules.mk
